{"version":3,"sources":["ReportPrediction.js","GraphPatternDensity.js","SelectSeries.js","GraphStockPrice.js","EdgeProbabilities.js","SelectTicker.js","App.js","serviceWorker.js","index.js"],"names":["ReportPrediction","_this","this","symbol","props","selectedSymbol","length","selectedLength","fetch","then","response","status","Error","json","data","setState","prediction","console","error","prevProps","prevState","snapshot","_this2","state","debug","fromDate","predictingFromDate","nextDate","predictingDate","seriesAry","series","react_default","a","createElement","className","probItems","map","priorPattern","priorPeriodsWere","name","probUp","probabilityOfNextBeingUp","toFixed","probDown","probabilityOfNextBeingDown","probNoChange","probabilityOfNextBeingNoChange","React","Component","darkUnica","Highcharts","GraphPatternDensity","selectedCompany","companyName","graphData","chartOptions","title","text","chart","height","type","plotOptions","column","stacking","dataLabels","enabled","color","theme","dataLabelsColor","xAxis","categories","totals","ups","downs","nochanges","highcharts_react_min_default","highcharts","constructorType","options","SelectSeries","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","firstSeriesName","firstSeriesLength","selectedSeries","_this3","seriesLength","event","target","value","filter","s","optionItems","content","onChange","src_ReportPrediction","src_GraphPatternDensity","isBrowser","dist","GraphStockPrice","predictId","EdgeProbabilities","probs","bestUpHigh","bestUpHighPerc","upCount","totalCount","bestDownHigh","bestDownHighPerc","bestNoChangeHigh","bestNoChangeHighPerc","bestUpLow","bestUpLowPerc","bestDownLow","bestDownLowPerc","bestNoChangeLow","bestNoChangeLowPerc","SelectTicker","firstSymbol","tickers","firstCompany","company","ticker","src_GraphStockPrice","src_EdgeProbabilities","src_SelectSeries","App","src_SelectTicker","isMobile","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d1eb98e.chunk.js","sourcesContent":["import React from 'react';\n\nclass ReportPrediction extends React.Component {\n\n    componentDidMount() {\n\n        let symbol = this.props.selectedSymbol;\n        let length = this.props.selectedLength;\n        if (symbol && length) {\n            let url = 'http://localhost:8081/api/latest/predict/' + symbol + \"?length=\" + length;\n            fetch(url).then(response => {\n                if (response.status >= 400) {\n                    throw new Error(\"Bad response from server\");\n                }\n                return response.json();\n            }).then(data => {\n                this.setState({prediction: data})\n            });\n        } else {\n            console.error(\"no symbol or length\")\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n        if (prevProps.selectedSymbol !== this.props.selectedSymbol ||\n            prevProps.selectedLength !== this.props.selectedLength) {\n            let symbol = this.props.selectedSymbol;\n            let length = this.props.selectedLength;\n            if (symbol && length) {\n                let url = 'http://localhost:8081/api/latest/predict/' + symbol + \"?length=\" + length;\n                fetch(url).then(response => {\n                    if (response.status >= 400) {\n                        throw new Error(\"Bad response from server\");\n                    }\n                    return response.json();\n                }).then(data => {\n                    this.setState({prediction: data})\n                });\n            } else {\n                console.error(\"no symbol or length\")\n            }\n        }\n    }\n\n    render() {\n\n        if (this.state === null) {\n            console.debug(\"render - no state\");\n            return null;\n        }\n\n        if (this.state.prediction === null) {\n            console.debug(\"render - no prediction\");\n            return null;\n        }\n\n        console.debug(\"render - \" + this.props.selectedSymbol);\n\n        let fromDate = this.state.prediction.predictingFromDate;\n        let nextDate = this.state.prediction.predictingDate;\n        let seriesAry = this.state.prediction.series;\n        if (seriesAry == null) {\n            return (\n                <div className=\"container-columns-left\">\n                    <div className=\"font-title-small\">Predictions</div>\n                    <div className=\"container-columns-left border font-default-text padding-sides\">No Predictions\n                        Available\n                    </div>\n                </div>\n            )\n        }\n\n        let probItems = seriesAry.map(function (data) {\n                let priorPattern = data.priorPeriodsWere;\n                let name = data.name;\n                let up = data.probabilityOfNextBeingUp * 100;\n                let probUp = \"Up = \" + up.toFixed(2) + \"%\";\n                let down = data.probabilityOfNextBeingDown * 100;\n                let probDown = \"Down = \" + down.toFixed(2) + \"%\";\n                let nc = data.probabilityOfNextBeingNoChange * 100;\n                let probNoChange = \"No Change = \" + nc.toFixed(2) + \"%\";\n                return (\n                    <div className=\"container-columns-left\">\n                        <div className=\"font-title-small\">Predictions</div>\n                        <div className=\"container-columns-left border padding-sides\">\n                            <div className=\"font-text-small\">{name}</div>\n                            <div className=\"font-text-small\">{fromDate} was {priorPattern}</div>\n                            <div className=\"font-text-small\">{nextDate} Close Probability</div>\n                            <div className=\"font-text-small\">{probUp}</div>\n                            <div className=\"font-text-small\">{probDown}</div>\n                            <div className=\"font-text-small\">{probNoChange}</div>\n                        </div>\n                    </div>\n                )\n            }\n        );\n\n        return (<div>{probItems}</div>);\n    }\n}\n\nexport default ReportPrediction;","import React from 'react';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts/highstock';\nimport darkUnica from 'highcharts/themes/dark-unica'\n\ndarkUnica(Highcharts);\n\nclass GraphPatternDensity extends React.Component {\n\n    componentDidMount() {\n        // Initial setup\n        let symbol = this.props.selectedSymbol;\n        let selectedLength = this.props.selectedLength;\n        if (symbol && selectedLength) {\n            let url = 'http://localhost:8081/api/latest/graph/pattern-density/' +\n                symbol + '?length=' + selectedLength;\n            fetch(url).then(response => {\n                if (response.status >= 400) {\n                    throw new Error(\"Bad response from server\");\n                }\n                return response.json();\n            }).then(data => {\n                this.setState({\n                    selectedSymbol: data.symbol,\n                    selectedCompany: data.companyName,\n                    selectedLength: selectedLength,\n                    data: data.graphData\n                });\n            });\n        } else {\n            console.error(\"no symbol or length\")\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n        if (prevProps.selectedSymbol !== this.props.selectedSymbol ||\n            prevProps.selectedLength !== this.props.selectedLength) {\n            let symbol = this.props.selectedSymbol;\n            let selectedLength = this.props.selectedLength;\n            if (symbol && selectedLength) {\n                let url = 'http://localhost:8081/api/latest/graph/pattern-density/' +\n                    symbol + '?length=' + selectedLength;\n                fetch(url).then(response => {\n                    if (response.status >= 400) {\n                        throw new Error(\"Bad response from server\");\n                    }\n                    return response.json();\n                }).then(data => {\n                    this.setState({\n                        selectedSymbol: data.symbol,\n                        selectedCompany: data.companyName,\n                        selectedLength: selectedLength,\n                        data: data.graphData\n                    });\n                });\n            } else {\n                console.error(\"no symbol or length\")\n            }\n        }\n    }\n\n    render() {\n\n        if (this.state === null) {\n            console.debug(\"render - no state\");\n            return null;\n        }\n\n        if (this.state.data === null) {\n            console.debug(\"render - no data\");\n            return null;\n        }\n\n        if (this.props.selectedSymbol === null) {\n            console.debug(\"render - no symbol\");\n            return null;\n        }\n\n        if (this.props.selectedCompany === null) {\n            console.debug(\"render - no company\");\n            return null;\n        }\n\n        if (this.props.selectedLength === null) {\n            console.debug(\"render - no series length\");\n            return null;\n        }\n\n        console.debug(\"render - \" + this.props.selectedSymbol + \" \" + this.props.selectedCompany +\n            \" \" + this.props.selectedLength);\n\n        let title = \"(\" + this.props.selectedSymbol + \") \" + this.props.selectedCompany + \" Pattern \" +\n            this.props.selectedLength + \" Period Density\";\n        let chartOptions = {\n            title: {text: title},\n            chart: {height: 300, type: 'column'},\n            plotOptions: {\n                column: {\n                    stacking: 'normal',\n                    dataLabels: {\n                        enabled: true,\n                        color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white'\n                    }\n                }\n            },\n            xAxis: {categories: this.state.data.categories},\n            series: [{name: 'Totals', data: this.state.data.totals},\n                {name: 'Up', data: this.state.data.ups},\n                {name: 'Down', data: this.state.data.downs},\n                {name: 'No Change', data: this.state.data.nochanges}],\n        };\n\n        return (\n            <HighchartsReact\n                highcharts={Highcharts}\n                constructorType={'chart'}\n                options={chartOptions}/>\n        );\n    }\n}\n\nexport default GraphPatternDensity","import React from 'react';\nimport ReportPrediction from \"./ReportPrediction\";\nimport {BrowserView, isBrowser, MobileView} from \"react-device-detect\";\nimport GraphPatternDensity from \"./GraphPatternDensity\";\n\nclass SelectSeries extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n\n        let symbol = this.props.selectedSymbol;\n        fetch('http://localhost:8081/api/latest/series/' + symbol)\n            .then(response => {\n                if (response.status >= 400) {\n                    throw new Error(\"Bad response from server\");\n                }\n                return response.json();\n            }).then(data => {\n            let firstSeriesName = data.series[0].name;\n            let firstSeriesLength = data.series[0].length;\n            this.setState({\n                series: data.series,\n                selectedSeries: firstSeriesName,\n                selectedLength: firstSeriesLength\n            });\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n        if (prevProps.selectedSymbol !== this.props.selectedSymbol) {\n            let symbol = this.props.selectedSymbol;\n            fetch('http://localhost:8081/api/latest/series/' + symbol)\n                .then(response => {\n                    if (response.status >= 400) {\n                        throw new Error(\"Bad response from server\");\n                    }\n                    return response.json();\n                }).then(data => {\n                let firstSeriesName = data.series[0].name;\n                let firstSeriesLength = data.series[0].length;\n                this.setState({\n                    series: data.series,\n                    selectedSeries: firstSeriesName,\n                    seriesLength: firstSeriesLength\n                });\n            });\n        }\n    }\n\n    handleChange(event) {\n        let series = this.state.series;\n        let selectedSeries = event.target.value;\n        let selectedLength = series.filter(s => s.name === selectedSeries)[0].length;\n        this.setState({\n            series: series,\n            selectedSeries: selectedSeries,\n            selectedLength: selectedLength\n        });\n    }\n\n    render() {\n\n        if (this.state === null) {\n            console.debug(\"render - no state\");\n            return null;\n        }\n\n        if (this.state.series === null) {\n            console.debug(\"render - no series\");\n            return null;\n        }\n\n        if (this.state.selectedSeries === null || this.state.selectedLength === null) {\n            console.debug(\"render - no selected series\");\n            return null;\n        }\n\n        console.debug(\"render - \" + this.state.selectedSeries);\n\n        let series = this.state.series;\n        let optionItems = series.map(s =>\n            <option value={s.name}>{s.name}</option>\n        );\n\n        let content = (\n            <div className=\"container-rows-left\">\n                <div className=\"container-column-left\">\n                    <div className=\"margin-bottom\">\n                        <select onChange={this.handleChange}>\n                            {optionItems}\n                        </select>\n                    </div>\n                    <ReportPrediction selectedSymbol={this.props.selectedSymbol}\n                                      selectedSeries={this.state.selectedSeries}\n                                      selectedLength={this.state.selectedLength}/>\n                </div>\n                <div className=\"container-columns-left margin-left\">\n                    <div className=\"margin-top chart-height\">\n                        <GraphPatternDensity selectedSymbol={this.props.selectedSymbol}\n                                             selectedCompany={this.props.selectedCompany}\n                                             selectedLength={this.state.selectedLength}/>\n                    </div>\n                </div>\n            </div>\n        );\n\n        if (isBrowser) {\n            return (\n                <BrowserView>{content}</BrowserView>\n            );\n        }\n\n        return (\n            <MobileView>{content}</MobileView>\n        );\n    }\n}\n\nexport default SelectSeries;","import React, {Component} from 'react';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts/highstock';\nimport darkUnica from 'highcharts/themes/dark-unica'\n\ndarkUnica(Highcharts);\n\nclass GraphStockPrice extends Component {\n\n    componentDidMount() {\n        let predictId = this.props.selectedSymbol;\n        if (predictId) {\n            let url = 'http://localhost:8081/api/latest/graph/stock/' + predictId;\n            fetch(url).then(response => {\n                if (response.status >= 400) {\n                    throw new Error(\"Bad response from server\");\n                }\n                return response.json();\n            }).then(data => {\n                this.setState({data: data})\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n        if (prevProps.selectedSymbol !== this.props.selectedSymbol) {\n            let predictId = this.props.selectedSymbol;\n            if (predictId) {\n                let url = 'http://localhost:8081/api/latest/graph/stock/' + predictId;\n                fetch(url).then(response => {\n                    if (response.status >= 400) {\n                        throw new Error(\"Bad response from server\");\n                    }\n                    return response.json();\n                }).then(data => {\n                    this.setState({data: data})\n                });\n            }\n        }\n    }\n\n    render() {\n\n        if (this.state == null) {\n            console.debug(\"render - no state\");\n            return null;\n        }\n\n        if (this.state.data == null) {\n            console.debug(\"render - no data\");\n            return null;\n        }\n\n        console.debug(\"render - \" + this.props.selectedSymbol);\n\n        let title = \"(\" + this.props.selectedSymbol + \") \" + this.props.selectedCompany + \" NYSE\";\n        let chartOptions = {\n            chart: {height: 300},\n            title: {text: title},\n            series: this.state.data,\n        };\n\n        return (\n            <HighchartsReact\n                highcharts={Highcharts}\n                constructorType={'stockChart'}\n                options={chartOptions}\n            />\n        );\n    }\n}\n\nexport default GraphStockPrice","import React from 'react';\n\nclass EdgeProbabilities extends React.Component {\n\n    componentDidMount() {\n        let url = 'http://localhost:8081/api/latest/edge-probabilities/Low';\n        fetch(url).then(response => {\n            if (response.status >= 400) {\n                throw new Error(\"Bad response from server\");\n            }\n            return response.json();\n        }).then(data => {\n            this.setState({probs: data})\n        });\n    }\n\n    render() {\n        if (this.state === null) {\n            console.debug(\"render - no state\");\n            return null;\n        }\n\n        console.debug(\"render - Low\");\n\n        if (this.state.probs === null) {\n            return (\n                <div className=\"container-columns-left\">\n                    <div className=\"font-title-small\">Edge Probabilities</div>\n                    <div className=\"container-columns-left border font-default-text padding-sides\">\n                        No Edge Probabilities Available\n                    </div>\n                </div>\n            )\n        }\n\n        // High\n        let bestUpHigh = this.state.probs.bestUpHigh;\n        let bestUpHighPerc = ((bestUpHigh.upCount / bestUpHigh.totalCount) * 100).toFixed(2);\n        let bestDownHigh = this.state.probs.bestDownHigh;\n        let bestDownHighPerc = ((bestDownHigh.upCount / bestDownHigh.totalCount) * 100).toFixed(2);\n        let bestNoChangeHigh = this.state.probs.bestNoChangeHigh;\n        let bestNoChangeHighPerc = ((bestNoChangeHigh.upCount / bestNoChangeHigh.totalCount) * 100).toFixed(2);\n        // Low\n        let bestUpLow = this.state.probs.bestUpLow;\n        let bestUpLowPerc = ((bestUpLow.upCount / bestUpLow.totalCount) * 100).toFixed(2);\n        let bestDownLow = this.state.probs.bestDownLow;\n        let bestDownLowPerc = ((bestDownLow.upCount / bestDownLow.totalCount) * 100).toFixed(2);\n        let bestNoChangeLow = this.state.probs.bestNoChangeLow;\n        let bestNoChangeLowPerc = ((bestNoChangeLow.upCount / bestNoChangeLow.totalCount) * 100).toFixed(2);\n        return (\n            <div className=\"container-columns-left\">\n                <div className=\"font-title-small\">Edge Probabilities</div>\n                <div className=\"container-columns-left border padding-sides\">\n                    <div className=\"font-default-text underline\">Highest Next Day Up</div>\n                    <div className=\"font-text-small\">[{bestUpHigh.symbol}] {bestUpHigh.value} {bestUpHighPerc}%</div>\n                    <div className=\"font-default-text underline\">Highest Next Day Down</div>\n                    <div className=\"font-text-small\">[{bestDownHigh.symbol}] {bestDownHigh.value} {bestDownHighPerc}%\n                    </div>\n                    <div className=\"font-default-text underline\">Highest Next Day No Change </div>\n                    <div\n                        className=\"font-text-small\">[{bestNoChangeHigh.symbol}] {bestNoChangeHigh.value} {bestNoChangeHighPerc}%\n                    </div>\n                    <div className=\"font-default-text underline\">Lowest Next Day Up</div>\n                    <div className=\"font-text-small\">[{bestUpLow.symbol}] {bestUpLow.value} {bestUpLowPerc}%</div>\n                    <div className=\"font-default-text underline\">Lowest Next Day Down</div>\n                    <div className=\"font-text-small\">[{bestDownLow.symbol}] {bestDownLow.value} {bestDownLowPerc}%</div>\n                    <div className=\"font-default-text underline\">Lowest Next Day <b>NoChange</b></div>\n                    <div\n                        className=\"font-text-small\">[{bestNoChangeLow.symbol}] {bestNoChangeLow.value} {bestNoChangeLowPerc}%\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default EdgeProbabilities;","import React from 'react';\nimport SelectSeries from \"./SelectSeries\";\nimport {BrowserView, isBrowser, MobileView} from \"react-device-detect\";\nimport GraphStockPrice from \"./GraphStockPrice\";\nimport EdgeProbabilities from \"./EdgeProbabilities\";\n\nclass SelectTicker extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n\n        fetch('http://localhost:8081/api/latest/tickers/')\n            .then(response => {\n                if (response.status >= 400) {\n                    throw new Error(\"Bad response from server\");\n                }\n                return response.json();\n            }).then(data => {\n            let firstSymbol = data.tickers[0].symbol;\n            let firstCompany = data.tickers[0].company;\n            this.setState(\n                {\n                    selectedSymbol: firstSymbol,\n                    selectedCompany: firstCompany,\n                    tickers: data.tickers\n                }\n            );\n        });\n    }\n\n    handleChange(event) {\n        let tickers = this.state.tickers;\n        let companyName = tickers.filter(ticker => ticker.symbol === event.target.value)[0].company;\n        this.setState(\n            {\n                selectedSymbol: event.target.value,\n                selectedCompany: companyName,\n                tickers: tickers\n            }\n        );\n    }\n\n    render() {\n        if (this.state === null) {\n            console.debug(\"render - no state\");\n            return null;\n        }\n\n        if (this.state.selectedSymbol === null) {\n            console.debug(\"render - no selected symbol\");\n            return null;\n        }\n\n        if (this.state.tickers === null) {\n            console.debug(\"render - no tickers\");\n            return null;\n        }\n\n        console.debug(\"render - \" + this.state.selectedSymbol);\n\n        let tickers = this.state.tickers;\n        let optionItems = tickers.map(ticker =>\n            <option value={ticker.symbol}>{ticker.symbol} - {ticker.company}</option>\n        );\n\n        let content = (\n            <div className=\"container-columns-center margin-all\">\n                <div className=\"container-rows-left\">\n                    <div className=\"container-columns-left margin-right\">\n                        <div className=\"margin-bottom\">\n                            <select onChange={this.handleChange}>\n                                {optionItems}\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"margin-bottom chart-height\">\n                        <GraphStockPrice selectedSymbol={this.state.selectedSymbol}\n                                         selectedCompany={this.state.selectedCompany}/>\n                    </div>\n                    <div className=\"margin-bottom margin-left\">\n                        <EdgeProbabilities/>\n                    </div>\n                </div>\n                <SelectSeries selectedSymbol={this.state.selectedSymbol}\n                              selectedCompany={this.state.selectedCompany}/>\n            </div>\n        );\n\n        if (isBrowser) {\n            return (\n                <BrowserView>{content}</BrowserView>\n            );\n        }\n\n        return (\n            <MobileView>{content}</MobileView>\n        );\n    }\n}\n\nexport default SelectTicker;","import React from \"react\";\nimport \"./App.css\";\nimport SelectTicker from \"./SelectTicker\";\nimport {BrowserView, isBrowser, isMobile, MobileView} from \"react-device-detect\";\n\nfunction App() {\n    if (isBrowser) {\n        return (\n            <BrowserView>\n                <div className=\"App\">\n                    <header className=\"container-columns-header\">Market Patterns</header>\n                    <SelectTicker/>\n                </div>\n            </BrowserView>\n        );\n    } else if (isMobile) {\n        return (\n            <MobileView>\n                <div className=\"App\">\n                    <header className=\"container-columns-header\">Market Patterns</header>\n                    <SelectTicker/>\n                </div>\n            </MobileView>\n        );\n    }\n\n    return (<div>Unknown view display, not a browser or a device</div>);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// Material Design React CSS components\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}