{"version":3,"sources":["ReportPrediction.js","SelectSeries.js","GraphStockPrice.js","GraphPatternDensity.js","SelectTicker.js","App.js","serviceWorker.js","index.js"],"names":["ReportPrediction","_this","this","predictId","props","selectedSymbol","fetch","then","response","status","Error","json","data","setState","prediction","prevProps","prevState","snapshot","_this2","state","console","debug","fromDate","predictingFromDate","nextDate","predictingDate","seriesAry","series","react_default","a","createElement","className","probItems","map","priorPattern","priorPeriodsWere","name","probUp","probabilityOfNextBeingUp","toFixed","probDown","probabilityOfNextBeingDown","probNoChange","probabilityOfNextBeingNoChange","React","Component","TickerName","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","seriesNames","names","selectedSeries","_this3","event","target","value","optionItems","content","onChange","src_ReportPrediction","isBrowser","dist","darkUnica","Highcharts","GraphStockPrice","chartOptions","chart","height","title","text","selectedCompany","highcharts_react_min_default","highcharts","constructorType","options","StockPriceGraph","symbol","companyName","graphData","type","plotOptions","column","stacking","dataLabels","enabled","color","theme","dataLabelsColor","xAxis","categories","totals","ups","downs","nochanges","SelectTicker","company","tickers","filter","ticker","SelectSeries","src_GraphStockPrice","GraphPatternDensity","App","src_SelectTicker","isMobile","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRA6FeA,8LAzFS,IAAAC,EAAAC,KAEZC,EAAYD,KAAKE,MAAMC,eACvBF,GAEAG,MADU,4CAA8CH,GAC7CI,KAAK,SAAAC,GACZ,GAAIA,EAASC,QAAU,IACnB,MAAM,IAAIC,MAAM,4BAEpB,OAAOF,EAASG,SACjBJ,KAAK,SAAAK,GACJX,EAAKY,SAAS,CAACC,WAAYF,iDAKpBG,EAAWC,EAAWC,GAAU,IAAAC,EAAAhB,KAE/C,GAAIa,EAAUV,iBAAmBH,KAAKE,MAAMC,eAAgB,CACxD,IAAIF,EAAYD,KAAKE,MAAMC,eAC3B,GAAIF,EAEAG,MADU,4CAA8CH,GAC7CI,KAAK,SAAAC,GACZ,GAAIA,EAASC,QAAU,IACnB,MAAM,IAAIC,MAAM,4BAEpB,OAAOF,EAASG,SACjBJ,KAAK,SAAAK,GACJM,EAAKL,SAAS,CAACC,WAAYF,wCAQvC,GAAkB,MAAdV,KAAKiB,MAEL,OADAC,QAAQC,MAAM,qBACP,KAGX,GAA6B,MAAzBnB,KAAKiB,MAAML,WAEX,OADAM,QAAQC,MAAM,0BACP,KAGXD,QAAQC,MAAM,YAAcnB,KAAKE,MAAMC,gBAEvC,IAAIiB,EAAWpB,KAAKiB,MAAML,WAAWS,mBACjCC,EAAWtB,KAAKiB,MAAML,WAAWW,eACjCC,EAAYxB,KAAKiB,MAAML,WAAWa,OACtC,GAAiB,MAAbD,EACA,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iEAAf,6BAKZ,IAAIC,EAAYN,EAAUO,IAAI,SAAUrB,GAChC,IAAIsB,EAAetB,EAAKuB,iBACpBC,EAAOxB,EAAKwB,KAEZC,EAAS,SAD4B,IAAhCzB,EAAK0B,0BACYC,QAAQ,GAAK,IAEnCC,EAAW,WAD8B,IAAlC5B,EAAK6B,4BACgBF,QAAQ,GAAK,IAEzCG,EAAe,gBAD4B,IAAtC9B,EAAK+B,gCACyBJ,QAAQ,GAAK,IACpD,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBK,GAClCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBT,EAAlC,QAAiDY,GACjDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBP,EAAlC,sBACAI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBM,GAClCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBS,GAClCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBW,OAOtD,OAAQd,EAAAC,EAAAC,cAAA,WAAME,UAvFSY,IAAMC,kBC4FtBC,cAxFX,SAAAA,EAAY1C,GAAO,IAAAH,EAAA,OAAA8C,OAAAC,EAAA,EAAAD,CAAA7C,KAAA4C,IACf7C,EAAA8C,OAAAE,EAAA,EAAAF,CAAA7C,KAAA6C,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAjD,KAAME,KACDgD,aAAenD,EAAKmD,aAAaC,KAAlBN,OAAAO,EAAA,EAAAP,CAAA9C,IAFLA,mFAKC,IAAAiB,EAAAhB,KAEZC,EAAYD,KAAKE,MAAMC,eAC3BC,MAAM,2CAA6CH,GAC9CI,KAAK,SAAAC,GACF,GAAIA,EAASC,QAAU,IACnB,MAAM,IAAIC,MAAM,4BAEpB,OAAOF,EAASG,SACjBJ,KAAK,SAAAK,GACRM,EAAKL,SAAS,CAAC0C,YAAa3C,EAAK4C,MAAOC,eAAgB7C,EAAK4C,MAAM,kDAIxDzC,EAAWC,EAAWC,GAAU,IAAAyC,EAAAxD,KAE/C,GAAIa,EAAUV,iBAAmBH,KAAKE,MAAMC,eAAgB,CACxD,IAAIF,EAAYD,KAAKE,MAAMC,eAC3BC,MAAM,2CAA6CH,GAC9CI,KAAK,SAAAC,GACF,GAAIA,EAASC,QAAU,IACnB,MAAM,IAAIC,MAAM,4BAEpB,OAAOF,EAASG,SACjBJ,KAAK,SAAAK,GACR8C,EAAK7C,SAAS,CAAC0C,YAAa3C,EAAK4C,MAAOC,eAAgB7C,EAAK4C,MAAM,6CAKlEG,GACTzD,KAAKW,SAAS,CAACR,eAAgBsD,EAAMC,OAAOC,QAC5CzC,QAAQC,MAAM,wCAKd,GAAkB,MAAdnB,KAAKiB,MAEL,OADAC,QAAQC,MAAM,qBACP,KAGX,GAA8B,MAA1BnB,KAAKiB,MAAMoC,YAEX,OADAnC,QAAQC,MAAM,sBACP,KAGX,GAAiC,MAA7BnB,KAAKiB,MAAMsC,eAEX,OADArC,QAAQC,MAAM,+BACP,KAGXD,QAAQC,MAAM,YAAcnB,KAAKiB,MAAMsC,gBAEvC,IACIK,EADc5D,KAAKiB,MAAMoC,YACCtB,IAAI,SAACG,GAAD,OAC9BR,EAAAC,EAAAC,cAAA,UAAQ+B,MAAOzB,GAAOA,KAGtB2B,EACAnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAQkC,SAAU9D,KAAKkD,cAClBU,IAGTlC,EAAAC,EAAAC,cAACmC,EAAD,CAAkB5D,eAAgBH,KAAKE,MAAMC,eAC3BoD,eAAgBvD,KAAKiB,MAAMsC,kBAIrD,OAAIS,YAEItC,EAAAC,EAAAC,cAACqC,EAAA,YAAD,KAAcJ,GAKlBnC,EAAAC,EAAAC,cAACqC,EAAA,WAAD,KAAaJ,UArFAnB,IAAMC,4DCC/BuB,IAAUC,SAoEKC,8LAhES,IAAArE,EAAAC,KACZC,EAAYD,KAAKE,MAAMC,eACvBF,GAEAG,MADU,gDAAkDH,GACjDI,KAAK,SAAAC,GACZ,GAAIA,EAASC,QAAU,IACnB,MAAM,IAAIC,MAAM,4BAEpB,OAAOF,EAASG,SACjBJ,KAAK,SAAAK,GACJX,EAAKY,SAAS,CAACD,KAAMA,iDAKdG,EAAWC,EAAWC,GAAU,IAAAC,EAAAhB,KAE/C,GAAIa,EAAUV,iBAAmBH,KAAKE,MAAMC,eAAgB,CACxD,IAAIF,EAAYD,KAAKE,MAAMC,eAC3B,GAAIF,EAEAG,MADU,gDAAkDH,GACjDI,KAAK,SAAAC,GACZ,GAAIA,EAASC,QAAU,IACnB,MAAM,IAAIC,MAAM,4BAEpB,OAAOF,EAASG,SACjBJ,KAAK,SAAAK,GACJM,EAAKL,SAAS,CAACD,KAAMA,wCAQjC,GAAkB,MAAdV,KAAKiB,MAEL,OADAC,QAAQC,MAAM,qBACP,KAGX,GAAuB,MAAnBnB,KAAKiB,MAAMP,KAEX,OADAQ,QAAQC,MAAM,oBACP,KAGXD,QAAQC,MAAM,YAAcnB,KAAKE,MAAMC,gBAEvC,IACIkE,EAAe,CACfC,MAAO,CAACC,OAAQ,KAChBC,MAAO,CAACC,KAHA,IAAMzE,KAAKE,MAAMC,eAAiB,KAAOH,KAAKE,MAAMwE,gBAAkB,SAI9EjD,OAAQzB,KAAKiB,MAAMP,MAGvB,OACIgB,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,CACIiD,WAAYT,IACZU,gBAAiB,aACjBC,QAAST,WA5DK1B,aCF9BuB,IAAUC,SAmGKY,8LA/FS,IAAAhF,EAAAC,KAEZC,EAAYD,KAAKE,MAAMC,eACvBF,GAEAG,MADU,0DAA4DH,GAC3DI,KAAK,SAAAC,GACZ,GAAIA,EAASC,QAAU,IACnB,MAAM,IAAIC,MAAM,4BAEpB,OAAOF,EAASG,SACjBJ,KAAK,SAAAK,GACJX,EAAKY,SACD,CACIR,eAAgBO,EAAKsE,OACrBN,gBAAiBhE,EAAKuE,YACtBvE,KAAMA,EAAKwE,yDAMZrE,EAAWC,EAAWC,GAAU,IAAAC,EAAAhB,KAE/C,GAAIa,EAAUV,iBAAmBH,KAAKE,MAAMC,eAAgB,CACxD,IAAIF,EAAYD,KAAKE,MAAMC,eAC3B,GAAIF,EAEAG,MADU,0DAA4DH,GAC3DI,KAAK,SAAAC,GACZ,GAAIA,EAASC,QAAU,IACnB,MAAM,IAAIC,MAAM,4BAEpB,OAAOF,EAASG,SACjBJ,KAAK,SAAAK,GACJM,EAAKL,SAAS,CACVD,KAAMA,EAAKwE,gDAS3B,GAAkB,MAAdlF,KAAKiB,MAEL,OADAC,QAAQC,MAAM,qBACP,KAGX,GAAuB,MAAnBnB,KAAKiB,MAAMP,KAEX,OADAQ,QAAQC,MAAM,oBACP,KAGX,GAAiC,MAA7BnB,KAAKE,MAAMC,eAEX,OADAe,QAAQC,MAAM,sBACP,KAGX,GAAkC,MAA9BnB,KAAKE,MAAMwE,gBAEX,OADAxD,QAAQC,MAAM,uBACP,KAGXD,QAAQC,MAAM,YAAcnB,KAAKE,MAAMC,eAAiB,IAAMH,KAAKE,MAAMwE,iBAEzE,IACIL,EAAe,CACfG,MAAO,CAACC,KAFA,IAAMzE,KAAKE,MAAMC,eAAiB,KAAOH,KAAKE,MAAMwE,gBAAkB,oBAG9EJ,MAAO,CAACC,OAAQ,IAAKY,KAAM,UAC3BC,YAAa,CACTC,OAAQ,CACJC,SAAU,SACVC,WAAY,CACRC,SAAS,EACTC,MAAQtB,IAAWuB,OAASvB,IAAWuB,MAAMC,iBAAoB,WAI7EC,MAAO,CAACC,WAAY7F,KAAKiB,MAAMP,KAAKmF,YACpCpE,OAAQ,CAAC,CAACS,KAAM,SAAUxB,KAAMV,KAAKiB,MAAMP,KAAKoF,QAC5C,CAAC5D,KAAM,KAAMxB,KAAMV,KAAKiB,MAAMP,KAAKqF,KACnC,CAAC7D,KAAM,OAAQxB,KAAMV,KAAKiB,MAAMP,KAAKsF,OACrC,CAAC9D,KAAM,YAAaxB,KAAMV,KAAKiB,MAAMP,KAAKuF,aAGlD,OACIvE,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,CACIiD,WAAYT,IACZU,gBAAiB,QACjBC,QAAST,WA3FK1B,aCoGfuD,cAnGX,SAAAA,EAAYhG,GAAO,IAAAH,EAAA,OAAA8C,OAAAC,EAAA,EAAAD,CAAA7C,KAAAkG,IACfnG,EAAA8C,OAAAE,EAAA,EAAAF,CAAA7C,KAAA6C,OAAAG,EAAA,EAAAH,CAAAqD,GAAAjD,KAAAjD,KAAME,KACDgD,aAAenD,EAAKmD,aAAaC,KAAlBN,OAAAO,EAAA,EAAAP,CAAA9C,IAFLA,mFAKC,IAAAiB,EAAAhB,KAEhBI,MAAM,6CACDC,KAAK,SAAAC,GACF,GAAIA,EAASC,QAAU,IACnB,MAAM,IAAIC,MAAM,4BAEpB,OAAOF,EAASG,SACjBJ,KAAK,SAAAK,GACRM,EAAKL,SACD,CACIR,eAAgBO,EAAK4C,MAAM,GAAG0B,OAC9BN,gBAAiBhE,EAAK4C,MAAM,GAAG6C,QAC/BC,QAAS1F,EAAK4C,+CAMjBG,GACT,IAAI2C,EACc,MAAdpG,KAAKiB,OAAuC,MAAtBjB,KAAKiB,MAAMmF,UACjCA,EAAUpG,KAAKiB,MAAMmF,SAGzB,IAAInB,EAAcmB,EAAQC,OAAO,SAAAC,GAAM,OAAIA,EAAOtB,SAAWvB,EAAMC,OAAOC,QAAO,GAAGwC,QACpFnG,KAAKW,SACD,CACIR,eAAgBsD,EAAMC,OAAOC,MAC7Be,gBAAiBO,EACjBmB,QAASA,qCAMjB,GAAkB,MAAdpG,KAAKiB,MAEL,OADAC,QAAQC,MAAM,qBACP,KAGX,GAAiC,MAA7BnB,KAAKiB,MAAMd,eAEX,OADAe,QAAQC,MAAM,+BACP,KAIX,GAA0B,MAAtBnB,KAAKiB,MAAMmF,QAEX,OADAlF,QAAQC,MAAM,uBACP,KAGXD,QAAQC,MAAM,YAAcnB,KAAKiB,MAAMd,gBAEvC,IACIyD,EADU5D,KAAKiB,MAAMmF,QACCrE,IAAI,SAACuE,GAAD,OAC1B5E,EAAAC,EAAAC,cAAA,UAAQ+B,MAAO2C,EAAOtB,QAASsB,EAAOtB,OAAtC,MAAiDsB,EAAOH,WAGxDtC,EAAWnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCAC1BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAQkC,SAAU9D,KAAKkD,cAClBU,IAGTlC,EAAAC,EAAAC,cAAC2E,EAAD,CAAcpG,eAAgBH,KAAKiB,MAAMd,kBAE7CuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAC4E,EAAD,CAAiBrG,eAAgBH,KAAKiB,MAAMd,eAC3BuE,gBAAiB1E,KAAKiB,MAAMyD,mBAEjDhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAC6E,EAAD,CAAqBtG,eAAgBH,KAAKiB,MAAMd,eAC3BuE,gBAAiB1E,KAAKiB,MAAMyD,sBAMjE,OAAIV,YAEItC,EAAAC,EAAAC,cAACqC,EAAA,YAAD,KAAcJ,GAKlBnC,EAAAC,EAAAC,cAACqC,EAAA,WAAD,KAAaJ,UAhGEnB,IAAMC,WCuBlB+D,MAxBf,WACI,OAAI1C,YAEItC,EAAAC,EAAAC,cAACqC,EAAA,YAAD,KACIvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAAlB,mBACAH,EAAAC,EAAAC,cAAC+E,EAAD,QAILC,WAEHlF,EAAAC,EAAAC,cAACqC,EAAA,WAAD,KACIvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAAlB,mBACAH,EAAAC,EAAAC,cAAC+E,EAAD,QAMRjF,EAAAC,EAAAC,cAAA,+DCdQiF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAOzF,EAAAC,EAAAC,cAACwF,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpH,KAAK,SAAAqH,GACjCA,EAAaC","file":"static/js/main.4d73cbb0.chunk.js","sourcesContent":["import React from 'react';\n\nclass ReportPrediction extends React.Component {\n\n    componentDidMount() {\n\n        let predictId = this.props.selectedSymbol;\n        if (predictId) {\n            let url = 'http://localhost:8081/api/latest/predict/' + predictId;\n            fetch(url).then(response => {\n                if (response.status >= 400) {\n                    throw new Error(\"Bad response from server\");\n                }\n                return response.json();\n            }).then(data => {\n                this.setState({prediction: data})\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n        if (prevProps.selectedSymbol !== this.props.selectedSymbol) {\n            let predictId = this.props.selectedSymbol;\n            if (predictId) {\n                let url = 'http://localhost:8081/api/latest/predict/' + predictId;\n                fetch(url).then(response => {\n                    if (response.status >= 400) {\n                        throw new Error(\"Bad response from server\");\n                    }\n                    return response.json();\n                }).then(data => {\n                    this.setState({prediction: data})\n                });\n            }\n        }\n    }\n\n    render() {\n\n        if (this.state == null) {\n            console.debug(\"render - no state\");\n            return null;\n        }\n\n        if (this.state.prediction == null) {\n            console.debug(\"render - no prediction\");\n            return null;\n        }\n\n        console.debug(\"render - \" + this.props.selectedSymbol);\n\n        let fromDate = this.state.prediction.predictingFromDate;\n        let nextDate = this.state.prediction.predictingDate;\n        let seriesAry = this.state.prediction.series;\n        if (seriesAry == null) {\n            return (\n                <div className=\"container-columns-left\">\n                    <div className=\"font-title-small\">Predictions</div>\n                    <div className=\"container-columns-left border font-default-text padding-sides\">No Predictions Available</div>\n                </div>\n            )\n        }\n\n        let probItems = seriesAry.map(function (data) {\n                let priorPattern = data.priorPeriodsWere;\n                let name = data.name;\n                let up = data.probabilityOfNextBeingUp * 100;\n                let probUp = \"Up = \" + up.toFixed(2) + \"%\";\n                let down = data.probabilityOfNextBeingDown * 100;\n                let probDown = \"Down = \" + down.toFixed(2) + \"%\";\n                let nc = data.probabilityOfNextBeingNoChange * 100;\n                let probNoChange = \"No Change = \" + nc.toFixed(2) + \"%\";\n                return (\n                    <div className=\"container-columns-left\">\n                        <div className=\"font-title-small\">Predictions</div>\n                        <div className=\"container-columns-left border padding-sides\">\n                            <div className=\"font-text-small\">{name}</div>\n                            <div className=\"font-text-small\">{fromDate} was {priorPattern}</div>\n                            <div className=\"font-text-small\">{nextDate} Close Probability</div>\n                            <div className=\"font-text-small\">{probUp}</div>\n                            <div className=\"font-text-small\">{probDown}</div>\n                            <div className=\"font-text-small\">{probNoChange}</div>\n                        </div>\n                    </div>\n                )\n            }\n        );\n\n        return (<div>{probItems}</div>);\n    }\n}\n\nexport default ReportPrediction;","import React from 'react';\nimport ReportPrediction from \"./ReportPrediction\";\nimport {BrowserView, isBrowser, MobileView} from \"react-device-detect\";\n\nclass TickerName extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n\n        let predictId = this.props.selectedSymbol;\n        fetch('http://localhost:8081/api/latest/series/' + predictId)\n            .then(response => {\n                if (response.status >= 400) {\n                    throw new Error(\"Bad response from server\");\n                }\n                return response.json();\n            }).then(data => {\n            this.setState({seriesNames: data.names, selectedSeries: data.names[0]});\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n        if (prevProps.selectedSymbol !== this.props.selectedSymbol) {\n            let predictId = this.props.selectedSymbol;\n            fetch('http://localhost:8081/api/latest/series/' + predictId)\n                .then(response => {\n                    if (response.status >= 400) {\n                        throw new Error(\"Bad response from server\");\n                    }\n                    return response.json();\n                }).then(data => {\n                this.setState({seriesNames: data.names, selectedSeries: data.names[0]});\n            });\n        }\n    }\n\n    handleChange(event) {\n        this.setState({selectedSymbol: event.target.value});\n        console.debug(\"tmp\");\n    }\n\n    render() {\n\n        if (this.state == null) {\n            console.debug(\"render - no state\");\n            return null;\n        }\n\n        if (this.state.seriesNames == null) {\n            console.debug(\"render - no series\");\n            return null;\n        }\n\n        if (this.state.selectedSeries == null) {\n            console.debug(\"render - no selected series\");\n            return null;\n        }\n\n        console.debug(\"render - \" + this.state.selectedSeries);\n\n        let seriesNames = this.state.seriesNames;\n        let optionItems = seriesNames.map((name) =>\n            <option value={name}>{name}</option>\n        );\n\n        let content = (\n            <div className=\"container-columns-left\">\n                <div className=\"margin-bottom\">\n                    <select onChange={this.handleChange}>\n                        {optionItems}\n                    </select>\n                </div>\n                <ReportPrediction selectedSymbol={this.props.selectedSymbol}\n                                  selectedSeries={this.state.selectedSeries}/>\n            </div>\n        );\n\n        if (isBrowser) {\n            return (\n                <BrowserView>{content}</BrowserView>\n            );\n        }\n\n        return (\n            <MobileView>{content}</MobileView>\n        );\n    }\n}\n\nexport default TickerName;","import React, {Component} from 'react';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts/highstock';\nimport darkUnica from 'highcharts/themes/dark-unica'\n\ndarkUnica(Highcharts);\n\nclass GraphStockPrice extends Component {\n\n    componentDidMount() {\n        let predictId = this.props.selectedSymbol;\n        if (predictId) {\n            let url = 'http://localhost:8081/api/latest/graph/stock/' + predictId;\n            fetch(url).then(response => {\n                if (response.status >= 400) {\n                    throw new Error(\"Bad response from server\");\n                }\n                return response.json();\n            }).then(data => {\n                this.setState({data: data})\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n        if (prevProps.selectedSymbol !== this.props.selectedSymbol) {\n            let predictId = this.props.selectedSymbol;\n            if (predictId) {\n                let url = 'http://localhost:8081/api/latest/graph/stock/' + predictId;\n                fetch(url).then(response => {\n                    if (response.status >= 400) {\n                        throw new Error(\"Bad response from server\");\n                    }\n                    return response.json();\n                }).then(data => {\n                    this.setState({data: data})\n                });\n            }\n        }\n    }\n\n    render() {\n\n        if (this.state == null) {\n            console.debug(\"render - no state\");\n            return null;\n        }\n\n        if (this.state.data == null) {\n            console.debug(\"render - no data\");\n            return null;\n        }\n\n        console.debug(\"render - \" + this.props.selectedSymbol);\n\n        let title = \"(\" + this.props.selectedSymbol + \") \" + this.props.selectedCompany + \" NYSE\";\n        let chartOptions = {\n            chart: {height: 300},\n            title: {text: title},\n            series: this.state.data,\n        };\n\n        return (\n            <HighchartsReact\n                highcharts={Highcharts}\n                constructorType={'stockChart'}\n                options={chartOptions}\n            />\n        );\n    }\n}\n\nexport default GraphStockPrice","import React, {Component} from 'react';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts/highstock';\nimport darkUnica from 'highcharts/themes/dark-unica'\n\ndarkUnica(Highcharts);\n\nclass StockPriceGraph extends Component {\n\n    componentDidMount() {\n        // Initial setup\n        let predictId = this.props.selectedSymbol;\n        if (predictId) {\n            let url = 'http://localhost:8081/api/latest/graph/pattern-density/' + predictId;\n            fetch(url).then(response => {\n                if (response.status >= 400) {\n                    throw new Error(\"Bad response from server\");\n                }\n                return response.json();\n            }).then(data => {\n                this.setState(\n                    {\n                        selectedSymbol: data.symbol,\n                        selectedCompany: data.companyName,\n                        data: data.graphData\n                    })\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n        if (prevProps.selectedSymbol !== this.props.selectedSymbol) {\n            let predictId = this.props.selectedSymbol;\n            if (predictId) {\n                let url = 'http://localhost:8081/api/latest/graph/pattern-density/' + predictId;\n                fetch(url).then(response => {\n                    if (response.status >= 400) {\n                        throw new Error(\"Bad response from server\");\n                    }\n                    return response.json();\n                }).then(data => {\n                    this.setState({\n                        data: data.graphData\n                    })\n                });\n            }\n        }\n    }\n\n    render() {\n\n        if (this.state == null) {\n            console.debug(\"render - no state\");\n            return null;\n        }\n\n        if (this.state.data == null) {\n            console.debug(\"render - no data\");\n            return null;\n        }\n\n        if (this.props.selectedSymbol == null) {\n            console.debug(\"render - no symbol\");\n            return null;\n        }\n\n        if (this.props.selectedCompany == null) {\n            console.debug(\"render - no company\");\n            return null;\n        }\n\n        console.debug(\"render - \" + this.props.selectedSymbol + \" \" + this.props.selectedCompany);\n\n        let title = \"(\" + this.props.selectedSymbol + \") \" + this.props.selectedCompany + \" Pattern Density\";\n        let chartOptions = {\n            title: {text: title},\n            chart: {height: 300, type: 'column'},\n            plotOptions: {\n                column: {\n                    stacking: 'normal',\n                    dataLabels: {\n                        enabled: true,\n                        color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white'\n                    }\n                }\n            },\n            xAxis: {categories: this.state.data.categories},\n            series: [{name: 'Totals', data: this.state.data.totals},\n                {name: 'Up', data: this.state.data.ups},\n                {name: 'Down', data: this.state.data.downs},\n                {name: 'No Change', data: this.state.data.nochanges}],\n        };\n\n        return (\n            <HighchartsReact\n                highcharts={Highcharts}\n                constructorType={'chart'}\n                options={chartOptions}\n            />\n        );\n    }\n}\n\nexport default StockPriceGraph","import React from 'react';\nimport SelectSeries from \"./SelectSeries\";\nimport GraphStockPrice from \"./GraphStockPrice\";\nimport GraphPatternDensity from \"./GraphPatternDensity\"\nimport {BrowserView, isBrowser, MobileView} from \"react-device-detect\";\n\nclass SelectTicker extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n\n        fetch('http://localhost:8081/api/latest/tickers/')\n            .then(response => {\n                if (response.status >= 400) {\n                    throw new Error(\"Bad response from server\");\n                }\n                return response.json();\n            }).then(data => {\n            this.setState(\n                {\n                    selectedSymbol: data.names[0].symbol,\n                    selectedCompany: data.names[0].company,\n                    tickers: data.names\n                }\n            );\n        });\n    }\n\n    handleChange(event) {\n        let tickers;\n        if (this.state != null && this.state.tickers != null) {\n            tickers = this.state.tickers;\n        }\n\n        let companyName = tickers.filter(ticker => ticker.symbol === event.target.value)[0].company;\n        this.setState(\n            {\n                selectedSymbol: event.target.value,\n                selectedCompany: companyName,\n                tickers: tickers\n            }\n        );\n    }\n\n    render() {\n        if (this.state == null) {\n            console.debug(\"render - no state\");\n            return null;\n        }\n\n        if (this.state.selectedSymbol == null) {\n            console.debug(\"render - no selected symbol\");\n            return null;\n        }\n\n\n        if (this.state.tickers == null) {\n            console.debug(\"render - no tickers\");\n            return null;\n        }\n\n        console.debug(\"render - \" + this.state.selectedSymbol);\n\n        let tickers = this.state.tickers;\n        let optionItems = tickers.map((ticker) =>\n            <option value={ticker.symbol}>{ticker.symbol} - {ticker.company}</option>\n        );\n\n        let content = (<div className=\"container-columns-center margin-all\">\n            <div className=\"container-rows-left\">\n                <div className=\"container-columns-left margin-right\">\n                    <div className=\"margin-bottom\">\n                        <select onChange={this.handleChange}>\n                            {optionItems}\n                        </select>\n                    </div>\n                    <SelectSeries selectedSymbol={this.state.selectedSymbol}/>\n                </div>\n                <div className=\"container-columns-left wrap margin-left\">\n                    <div className=\"margin-bottom chart-height\">\n                        <GraphStockPrice selectedSymbol={this.state.selectedSymbol}\n                                         selectedCompany={this.state.selectedCompany}/>\n                    </div>\n                    <div className=\"margin-top chart-height\">\n                        <GraphPatternDensity selectedSymbol={this.state.selectedSymbol}\n                                             selectedCompany={this.state.selectedCompany}/>\n                    </div>\n                </div>\n            </div>\n        </div>);\n\n        if (isBrowser) {\n            return (\n                <BrowserView>{content}</BrowserView>\n            );\n        }\n\n        return (\n            <MobileView>{content}</MobileView>\n        );\n    }\n}\n\nexport default SelectTicker;","import React from \"react\";\nimport \"./App.css\";\nimport SelectTicker from \"./SelectTicker\";\nimport {BrowserView, isBrowser, isMobile, MobileView} from \"react-device-detect\";\n\nfunction App() {\n    if (isBrowser) {\n        return (\n            <BrowserView>\n                <div className=\"App\">\n                    <header className=\"container-columns-header\">Market Patterns</header>\n                    <SelectTicker/>\n                </div>\n            </BrowserView>\n        );\n    } else if (isMobile) {\n        return (\n            <MobileView>\n                <div className=\"App\">\n                    <header className=\"container-columns-header\">Market Patterns</header>\n                    <SelectTicker/>\n                </div>\n            </MobileView>\n        );\n    }\n\n    return (<div>Unknown view display, not a browser or a device</div>);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// Material Design React CSS components\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}